@page "/homework/{id}" 
@inject Vocabulary.Data.HomeworkStore HomeworkStore

@if (homework != null)
{
    <h3>@homework.Name</h3>
    
    <EditForm Model="@homework" OnValidSubmit=@ValidFormSubmitted>
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="Name">Namnet på läxan:</label>
            <InputText @bind-Value="@homework.Name" class="form-control" id="Name" />
            <label for="Desc">Beskrivning:</label>
            <InputText @bind-Value="@homework.Description" class="form-control" id="Desc" />
        </div>
        <div class="form-group">
            <label for="Lang">Språk</label>
            <InputText @bind-Value="@homework.Language" class="form-control" id="Lang" />
        </div>
        <div class="form-group">
            <label for="Words">Glosor</label>@if(@homework.Words.Count <= 0){<span class="badge badge-warning ml-2">Lägg till glosor till läxan!</span >}
            <table id="Words" class="table table-bordered">
                <thead>
                    <tr>
                        <th width="100"># <button class="btn btn-sm btn-primary float-right" @onclick="@AddWord"> + </button></th>
                        <th>Svenska</th>
                        <th>@homework.Language</th>
                        <th width="100">Antal <small>gånger i förhör</small></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var g in homework.Words)
                    {
                        <tr>
                            <td><button type="button" class="btn btn-sm btn-danger ml-2" @onclick="(()=>RemoveWord(g.Id))">Ta bort</button></td>
                            <td>
                                <div class="form-group">
                                    <InputText @bind-Value="@g.Native" />
                                </div>
                            </td>
                            <td>
                                <div class="form-group">
                                    <InputText @bind-Value="@g.Translated" />
                                </div>
                            </td>
                            <td><InputNumber @bind-Value="@g.NrToComplete"/></td>
                        </tr>
                    }
                    <tr>
                        <td colspan="4">
                            <button class="btn btn-sm btn-primary" @onclick="@AddWord"> + </button>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>

        <input type="submit" class="btn btn-primary" value="Spara" />
    </EditForm>
    <br />
    @if (showSparad) {
        <div class="toast fade show" style="position:absolute; top:40px; right:40px" role="alert" aria-live="polite" aria-atomic="true" data-delay="5000">
            <div class="toast-header">
                <strong class="mr-auto">@homework.Name</strong>
                <small>Sparad</small>
                <button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close" @onclick="@HideTost">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="toast-body">
                Ändringarna på läxan är sparad
            </div>
        </div>
    }
}

@code {
    [Parameter]
    public string Id { get; set; }

    Shared.Homework homework = null;

    bool showSparad = false;

    System.Threading.Timer timer;

    protected override async Task OnInitializedAsync()
    {
        homework = await HomeworkStore.GetHomeworkAsync(Id);
    }

    async Task ValidFormSubmitted()
    {
        try
        {
            await HomeworkStore.SaveHomeworkAsync(homework);
            showSparad = true;
            timer = new System.Threading.Timer((object state) =>
            {
                showSparad = false;
                StateHasChanged();
            },null,3000,System.Threading.Timeout.Infinite);
            StateHasChanged();
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    async Task AddWord()
    {
        homework.Words.Add(new Word());
    }

    async Task RemoveWord(string id)
    {
        var w = homework.Words.FirstOrDefault(x => x.Id == id);

        homework.Words.Remove(w);
    }

    async Task HideTost()
    {
        showSparad = false;
    }
}
